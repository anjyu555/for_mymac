# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
# env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  # TERM: xterm-256color-italic
# GPU 拡張ターミナルエミュレータである Alacritty の設定

# 以下の `env` エントリにある項目は全て環境変数として追加されます。
# 環境変数として追加されます。いくつかの項目は、Alacritty自身が設定した変数を上書きする可能性があります。
# alacritty自身によって設定されます。
# env:
  # TERM envのカスタマイズ。
  #
  # このプロパティが設定されていない場合、alacrittyはxterm-256colorに設定します。
  #
  # xtermのterminfoデータベースの中には、イタリック体のサポートを宣言していないものがあることに注意してください。
  # `smso` と `sitm` の存在を確認することで、このことを確かめることができます。
  # `infocmp xterm-256color`.
  # TERM: xterm-256color-italic

# www.DeepL.com/Translator（無料版）で翻訳しました。

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels. If both are zero this
  # setting is ignored.
  # Window dimensions (変更には再起動が必要)
  #
  # ピクセルではなく、列数/行数で指定します. 両方が0の場合, この
  # この設定は無視されます.
  dimensions:
    columns: 100
    lines: 85

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is not scaled by
  # DPI and the specified value is always added at both opposing sides.
  # Window padding (変更には再起動が必要)
  #
  # ウィンドウの周囲に追加される空白のスペースをピクセル単位で指定します. このパディングはDPIでスケーリングされることはなく.
  # このパディングはDPIによる拡大縮小は行われず, 常に指定された値が両隣に追加されます.
  padding:
    x: 0
    y: 0

  # Spread additional padding evenly around the terminal content.
  # 追加のパディングを端末のコンテンツに均等に広げます。
  dynamic_padding: false

  # Window decorations
  #
  # Available values:
  # - full: borders and title bar
  # - none: neither borders nor title bar
  # - transparent: title bar, transparent background and title bar buttons
  # - buttonless: title bar, transparent background, but no title bar buttons
  # 窓辺の装飾
  #
  # 利用可能な値
  # - full: ボーダーとタイトルバー
  # - none: 枠線もタイトルバーもなし
  # - transparent: タイトルバー, 背景が透明, タイトルバーボタンあり
  # - buttonless: タイトルバー、背景は透明、タイトルバーボタンはなし
  decorations: full

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  # Startup Mode (変更には再起動が必要)
  #
  # `startup_mode` の値です。
  # - ウィンドウ表示
  # - 最大化
  # - フルスクリーン
  #
  # `startup_mode` の値(macOSのみ):
  # - SimpleFullscreen
  startup_mode: Windowed

  # Background opacity
  # 背景の不透明度
  opacity: 1.0

scrolling:
  # maximum number of lines in the scrollback buffer. Specifying '0' will
  # disable scrolling.
  # スクロールバックバッファーの最大行数。0'を指定すると
  # スクロールを無効化する。
  history: 0

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  # スクロールバックが有効な場合(履歴 > 0)、ビューポートが1行スクロールするごとに移動する行数。
  # スクロールバックが有効な場合(history > 0)、1行スクロールするごとにビューポートが移動する行数を指定します。
  multiplier: 3

# Font configuration (changes require restart)
# Fontの設定 (変更には再起動が必要)
font:
  # The normal (roman) font face to use.
  # Style can be specified to pick a specific face.
  # 使用する通常の(ローマン)フォントフェイス.
  # スタイルを指定することで、特定の書体を選択することができます.
  normal:
    family: Ricty
    # style: Light
    # family: "Fira Code"
    # family: "Source Code Pro"
    # style: Retina
    #家族 "フィラ・コード"
    # ファミリー "ソースコードプロ"
    # style: レティナ

  # The bold font face
  # 太字の書体
  bold:
    family: Ricty
    style: Medium
    # family: "Fira Code"
    # family: "Source Code Pro"
    #家族 "フィラ・コード"
    # ファミリー "ソースコード・プロ"

  # The italic font face
  # イタリック体の書体
  italic:
    family: Ricty
    style: "Light Italic"
    # style: "Light Oblique"
    # family: "Fira Code"
    # family: "Source Code Pro"
    # style: "Medium Italic"
    # style: "ライトオブリク"
    # family: "フィラコード"
    # family: "Fira Code "ソースコードプロ"
    # style: "ミディアムイタリック"

  # Point size of the font
  # フォントのサイズ
  size: 24.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  # オフセットは各文字の周りの余分なスペースです。
  # offset.y は行間を変更するもの、offset.x は文字間隔を変更するものと考えることができます。
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  # グリフのオフセットは、セル内のグリフの位置を決定します。
  # デフォルトは最下部である。x方向のオフセットを大きくするとグリフが右方向に移動し, y方向のオフセットを大きくするとグリフが上方向に移動します.
  # yオフセットを大きくするとグリフが上方向に移動します.
  glyph_offset:
    x: 0
    y: 0

  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina you
  # probably want this set to false.
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  # 細いストロークのフォントレンダリング (macOS のみ)
  #
  # 細いストロークは Retina ディスプレイに適していますが、非 Retina ディスプレイの場合は、 # おそらくこの設定を false にします。
  # おそらくこれは false に設定する必要があります。
  #
  # macOS >= 10.14.x:
  #
  # もし非Retinaディスプレイのフォント品質が悪いと感じたら, # `use_thin_strokes' を設定してください.
  # `use_thin_strokes` を `true` に設定し、以下のコマンドを実行してフォントのスムーシングを # 有効にします。
  # 以下のコマンドを実行してください。
  # `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`.
  #
  # この設定はグローバルなものであり、有効にするにはログアウトまたは再起動が必要 # です。
  # この設定はグローバルなものであり、有効にするにはログアウトまたは再起動が必要です。
use_thin_strokes: false

# When true, bold text is drawn using the bright variant of colors.
# true の場合、太字のテキストは明るい色のバリアントで描かれます。
draw_bold_text_with_bright_colors: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
# カスタムカーソルの色を使用します. trueの場合, カーソルをcursor.foreground
# とcursor.backgroundの色で表示し、それ以外の場合はカーソルの色を反転させます。
custom_cursor_colors: true

# Colors
# 色
colors:

  # Tomorrow (https://github.com/aarowill/base16-alacritty/blob/master/colors/base16-tomorrow.yml)
  # Default colors
  # Tomorrow (https://github.com/aarowill/base16-alacritty/blob/master/colors/base16-tomorrow.yml)
  # デフォルトの色
  primary:
    background: '0xffffff'
    foreground: '0x4d4d4c'
  # Colors the cursor will use if `custom_cursor_colors` is true
  # `custom_cursor_colors` が true の場合、カーソルが使用する色。
  cursor:
    text: '0xffffff'
    cursor: '0x4d4d4c'
  # Normal colors
  # 通常色
  normal:
    black:   '0xffffff'
    red:     '0xc82829'
    green:   '0x718c00'
    yellow:  '0xeab700'
    blue:    '0x4271ae'
    magenta: '0x8959a8'
    cyan:    '0x3e999f'
    white:   '0x4d4d4c'
  # Bright colors
  
  bright:
    black:   '0x8e908c'
    red:     '0xf5871f'
    green:   '0xe0e0e0'
    yellow:  '0xd6d6d6'
    blue:    '0x969896'
    magenta: '0x282a2e'
    cyan:    '0xa3685a'
    white:   '0x1d1f21'

  # # Tomorrow Night (https://github.com/aarowill/base16-alacritty/blob/master/colors/base16-tomorrow-night.yml)
  # # Default colors
   # # デフォルトの色
  # primary:
  # 一次:
  #   background: '0x1d1f21'
  #   foreground: '0xc5c8c6'
  # # Colors the cursor will use if `custom_cursor_colors` is true
  # cursor:
  # カーソル:
  #   text: '0x1d1f21'
  #   cursor: '0xc5c8c6'
  # # Normal colors
  # # 通常色
  # normal:
  # 通常
  #   black:   '0x1d1f21'
  #   red:     '0xcc6666'
  #   green:   '0xb5bd68'
  #   yellow:  '0xf0c674'
  #   blue:    '0x81a2be'
  #   magenta: '0xb294bb'
  #   cyan:    '0x8abeb7'
  #   white:   '0xc5c8c6'
  # # Bright colors
  # # 明るい色
  # bright:
  # 明るい
  #   black:   '0x969896'
  #   red:     '0xde935f'
  #   green:   '0x282a2e'
  #   yellow:  '0x373b41'
  #   blue:    '0xb4b7b4'
  #   magenta: '0xe0e0e0'
  #   cyan:    '0xa3685a'
  #   white:   '0xffffff'

  # Indexed Colors
  # インデックス色
  #
  # The indexed colors include all colors from 16 to 256.
  # When these are not set, they're filled with sensible defaults.
  # インデックスされた色には、16から256までの全ての色が含まれます。
  # これらが設定されていない場合, 感覚的なデフォルトで埋められます.
  #
  # Example:
  # 例:
  #   `- { index: 16, color: '0xff00ff' }`
  #
  # indexed_colors: []

# Visual Bell
# ビジュアル・ベル
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
# BELコードを受信すると、Alacrittyはいつでもビジュアルベルを "鳴らす "ことができます。一度
# 鳴らすと、ターミナルの背景は白に設定され、デフォルトの背景色に戻ります。
# デフォルトの背景色に戻ります。この遷移の速度は次のように制御することができます。
# (ミリ秒単位で表示されます). また
# アニメーション`プロパティを設定することで、トランジション機能を設定することができる。
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
# `animation` に指定可能な値
# `Ease`
# `EaseOut` (イーズアウト)
# `EaseOutSine` (イーズアウトサイン)
# `EaseOutQuad` (イーズアウトクアッド)
# `EaseOutCubic` (イージーアウトキュービック)
# `EaseOutQuart` (イーズアウトクォート)
# `EaseOutQuint` (イーズアウトクイント)
# `EaseOutExpo` (イーズアウトエクスポ)
# `EaseOutCirc` (イーズアウトサークル)
# `Linear` (リニア)
#
# 視覚的なベルを完全に無効にするには、その継続時間を0に設定します。
#
bell:
  animation: EaseOutExpo
  color: '0xffffff'
  duration: 0


# Key bindings
# キー割り当て
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
# キーバインディングは、オブジェクトのリストとして指定されます。各バインディングには
# バインディングは、キーとそのキーに必要な修飾子、バインディングが適用されるターミナルモード、キーバインディングが発生したときに行うべきことを指定します。
# そして、キーバインディングが発生したときに何をすべきかを指定します。バインディングは
# 実行中のアプリケーションにバイト列を送る(`chars`)か、あらかじめ # 定義されたアクションを実行する(`action`)か。
# 定義済みのアクションを実行する (`action`) か、フォークして指定されたコマンドと # 引数を実行する (`command`) かです。
# 引数を指定することもできる(`command`)。
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
# バインディングはデフォルトで常に埋められていますが、同じトリガーを持つ新しいバインディ # ングが定義されると置き換わります。
# が定義された場合、置き換えられます。デフォルトのバインディングを解除するには、次のようにします。
# `None` アクションにマップされます。
#
# Example:
# 例
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
# 利用可能なフィールド:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   利用可能なキーコードの一覧はこちらをご覧ください。
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   キーの名前を使う代わりに、`key` フィールドでは、希望するキーのスキャンコードを使うことも可能です。
#   希望するキーのスキャンコードを使用することもできます。スキャンコードは10進数で指定する必要があります。
#   10進数で指定する必要があります。
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#   このコマンドは、特定のキーの16進スキャンコードを表示することができます。
#   `showkey --scancodes` を実行します。
#
# Values for `mods`:
# `mods` に対応する値:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#   複数の `mods` は `|` を使って、次のように組み合わせることができます。mods: Control|Shift`.
#   空白文字と大文字は関連性があり、例と一致する必要があります。
#
# Values for `chars`:
# `chars` の値:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#   `chars` フィールドは指定された文字列をターミナルに書き込みます。これにより
#   エスケープシーケンスを渡すことができます。
#   `PageUp` (" \x1b[5~") のようなバインディングのエスケープコードを見つけるには、 # tmuxの外で `showkey -a` というコマンドを実行します。
#   tmuxの外部で`showkey -a`というコマンドを実行します。
#   アプリケーションがterminfoを使用してエスケープシーケンスをキーにマップする # ことに注意してください。
#   アプリケーションがterminfoを使ってエスケープシーケンスを # キーにマッピングすることに注意してください。そのため、エスケープシーケンスを変更する際には、 # terminfoを更新する必要がある。
#   エスケープシーケンスを変更する際にはterminfoを更新する必要があります。
#
# Values for `action`:
# `action` の値:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
# `action` の値(macOSのみ)。
# - ToggleSimpleFullscreen: 他のスペースを占有せずにフルスクリーンにする
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
# `command` の値です。
# コマンド`フィールドは `program` 文字列と `args` 文字列を含むマップでなければならない。
# コマンドラインパラメータ文字列の `args` 配列を含むマップである。
#
#   Example:
#   例:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
# `mode` の値:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
#
key_bindings:
  - { key: V,        mods: Command,       action: Paste                        }
  - { key: C,        mods: Command,       action: Copy                         }
  - { key: Q,        mods: Command,       action: Quit                         }
  - { key: N,        mods: Command,       action: SpawnNewInstance             }
  - { key: Return,   mods: Command,       action: ToggleFullscreen             }

  - { key: Home,                          chars: "\x1bOH",   mode: AppCursor   }
  - { key: Home,                          chars: "\x1b[H",   mode: ~AppCursor  }
  - { key: End,                           chars: "\x1bOF",   mode: AppCursor   }
  - { key: End,                           chars: "\x1b[F",   mode: ~AppCursor  }
  - { key: Equals,   mods: Command,       action: IncreaseFontSize             }
  - { key: Minus,    mods: Command,       action: DecreaseFontSize             }
  - { key: Minus,    mods: Command|Shift, action: ResetFontSize                }
  - { key: PageUp,   mods: Shift,         chars: "\x1b[5;2~"                   }
  - { key: PageUp,   mods: Control,       chars: "\x1b[5;5~"                   }
  - { key: PageUp,                        chars: "\x1b[5~"                     }
  - { key: PageDown, mods: Shift,         chars: "\x1b[6;2~"                   }
  - { key: PageDown, mods: Control,       chars: "\x1b[6;5~"                   }
  - { key: PageDown,                      chars: "\x1b[6~"                     }
  - { key: Left,     mods: Shift,         chars: "\x1b[1;2D"                   }
  - { key: Left,     mods: Control,       chars: "\x1b[1;5D"                   }
  - { key: Left,     mods: Alt,           chars: "\x1b[1;3D"                   }
  - { key: Left,                          chars: "\x1b[D",   mode: ~AppCursor  }
  - { key: Left,                          chars: "\x1bOD",   mode: AppCursor   }
  - { key: Right,    mods: Shift,         chars: "\x1b[1;2C"                   }
  - { key: Right,    mods: Control,       chars: "\x1b[1;5C"                   }
  - { key: Right,    mods: Alt,           chars: "\x1b[1;3C"                   }
  - { key: Right,                         chars: "\x1b[C",   mode: ~AppCursor  }
  - { key: Right,                         chars: "\x1bOC",   mode: AppCursor   }
  - { key: Up,       mods: Shift,         chars: "\x1b[1;2A"                   }
  - { key: Up,       mods: Control,       chars: "\x1b[1;5A"                   }
  - { key: Up,       mods: Alt,           chars: "\x1b[1;3A"                   }
  - { key: Up,                            chars: "\x1b[A",   mode: ~AppCursor  }
  - { key: Up,                            chars: "\x1bOA",   mode: AppCursor   }
  - { key: Down,     mods: Shift,         chars: "\x1b[1;2B"                   }
  - { key: Down,     mods: Control,       chars: "\x1b[1;5B"                   }
  - { key: Down,     mods: Alt,           chars: "\x1b[1;3B"                   }
  - { key: Down,                          chars: "\x1b[B",   mode: ~AppCursor  }
  - { key: Down,                          chars: "\x1bOB",   mode: AppCursor   }
  - { key: Tab,      mods: Shift,         chars: "\x1b[Z"                      }
  - { key: F1,                            chars: "\x1bOP"                      }
  - { key: F2,                            chars: "\x1bOQ"                      }
  - { key: F3,                            chars: "\x1bOR"                      }
  - { key: F4,                            chars: "\x1bOS"                      }
  - { key: F5,                            chars: "\x1b[15~"                    }
  - { key: F6,                            chars: "\x1b[17~"                    }
  - { key: F7,                            chars: "\x1b[18~"                    }
  - { key: F8,                            chars: "\x1b[19~"                    }
  - { key: F9,                            chars: "\x1b[20~"                    }
  - { key: F10,                           chars: "\x1b[21~"                    }
  - { key: F11,                           chars: "\x1b[23~"                    }
  - { key: F12,                           chars: "\x1b[24~"                    }
  - { key: Back,                          chars: "\x7f"                        }
  - { key: Back,     mods: Alt,           chars: "\x1b\x7f"                    }
  - { key: Insert,                        chars: "\x1b[2~"                     }
  - { key: Delete,                        chars: "\x1b[3~"                     }

    # shortcuts for tmux. the leader key is control-b (0x02)
  - { key: W,        mods: Command,       chars: "\x02&"                       }  # close tab (kill)
  - { key: T,        mods: Command,       chars: "\x02c"                       }  # new tab
  - { key: RBracket, mods: Command|Shift, chars: "\x02n"                       }  # select next tab
  - { key: LBracket, mods: Command|Shift, chars: "\x02p"                       }  # select previous tab
  - { key: RBracket, mods: Command,       chars: "\x02o"                       }  # select next pane
  - { key: LBracket, mods: Command,       chars: "\x02;"                       }  # select last (previously used) pane
  - { key: F,        mods: Command,       chars: "\x02/"                       }  # search (upwards) (see tmux.conf)

mouse:
  # Click settings
  # クリック設定
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  # `double_click` と `triple_click` の設定は時間をコントロールします。
  #  alacrittyは複数のクリックを1つのダブルクリックまたはトリプルクリックとして受け取るまで
  #  またはトリプルクリックとして受け入れるまでの時間を制御します。
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  # この値が `true` の場合、入力時にカーソルが一時的に隠れます。
  hide_when_typing: true

  # URL launcher
  # URLランチャー
  # url:
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    # このプログラムは, URLとして認識されるテキストをクリックした際に実行されます.
    # URLは常に最後のパラメータとしてコマンドに追加されます.
    #
    # When set to `None`, URL launching will be disabled completely.
    # `None` に設定すると、URLの起動が完全に無効になります。
    #
    # Default:
    #   - (macOS) open
    #   - (Linux) xdg-open
    #   - (Windows) explorer
    # launcher:
    #   program: xdg-open
    #   args: []

    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    # modifiers: Control|Shift
    # これらは, URLを開く際にクリックする際に押さえる必要がある修飾子です.
    # 開くために押さえる必要のある修飾子です. 利用可能な修飾子は, キーバインドセクションに記載されています.
    # 修飾子です: コントロール|シフト

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

# Mouse bindings
# マウス操作
#
# Available fields:
# 利用できるフィールド:
# - mouse
# - action
# - mods (optional)
#
# Values for `mouse`:
# `mouse` の値:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
# 利用可能なすべての `mods` と `action` の値は、キーバインド
# セクションを参照してください。
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  # これが `true` である場合、カーソルはウィンドウにフォーカスが当たっていない時、空洞の箱として描画されます。
  # ウィンドウにフォーカスがない場合、カーソルは空洞のボックスとして描画されます。
  unfocused_hollow: true

# dynamic_title: false
# ダイナミックタイトル：false

# Live config reload (changes require restart)
# Live config reload (変更には再起動が必要)
live_config_reload: true

debug:
  # Should display the render timer
  # レンダリングタイマーを表示する
  render_timer: false

  # Keep the log file after quitting Alacritty.
  # Alacrittyを終了した後もログファイルを保持する。
  persistent_logging: false

  # Log level
  # ログ出力レベル
  #
  # Values for `log_level`:
  # `log_level` の値:
  #   - OFF
  #   - ERROR
  #   - WARN
  #   - INFO
  #   - DEBUG
  #   - TRACE
  log_level: OFF

  # Print all received window events.
  # 受信した全てのウィンドウイベントを表示する
  print_events: false

  # Record all characters and escape sequences as test data.
  # 全ての文字とエスケープシーケンスをテストデータとして記録する
  ref_test: false

# Shell
# シェル
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
# shell.programには好きなシェルのパス(例: /bin/fish)を指定します.
# shell.argsのエントリはシェルへの引数として変更されずに渡されます.
shell:
  program: /usr/local/bin/zsh
#shell:
#  program: /usr/local/bin/fish
 # args:
  #  - --command=tmux

# vim: nospell
